主要参考廖雪峰官方网站的Git教程

安装完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
你也许会担心，如果有人故意冒充别人怎么办？
这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

注意git config命令的--global参数，
用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

1.通过git init命令把这个目录变成Git可以管理的仓库:
$ git init 

2.用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt

3.用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"

4.git status命令可以让我们时刻掌握仓库当前的状态:
$ git status

5.用git diff这个命令查看具体修改了什么内容，git diff顾名思义就是查看difference：
$ git diff readme.txt 

6.git log命令显示从最近到最远的提交日志，用git log可以查看提交历史，以便确定要回退到哪个版本：
$ git log

7.回退版本：首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...
 （注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，
 当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id：
$ git reset --hard HEAD^

8.指定回到未来的某个版本：
 只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个修改内容的commit id是1094adb...，
 于是就可以指定回到未来的某个版本：
$ git reset --hard 1094a

9.现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
 在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到修改内容，
 就必须找到修改内容的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog

10.git checkout -- file可以丢弃工作区的修改：
 命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
 总之，就是让这个文件回到最近一次git commit或git add时的状态。
$ git checkout -- readme.txt

11.用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
 git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
 然后再丢弃工作区的修改。
$ git reset HEAD readme.txt
$ git checkout -- readme.txt

12.删除文件：一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
 $ git rm test.txt
 $ git commit -m "remove test.txt"

 另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
 git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
 $ git checkout -- test.txt

13.远程仓库GitHub：
 请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
 第1步：创建SSH Key。打开Shell（Windows下打开Git Bash），创建SSH Key：
 $ ssh-keygen -t rsa -C "youremail@example.com"
 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，
 这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

 为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，
 而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
 当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
 只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
 最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。

14.添加远程库：
 现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，
 这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
 首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
 目前，在GitHub上的这个新建的仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，
 也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
 现在，我们根据GitHub的提示，在本地的仓库下运行命令：
 $ git remote add origin git@github.com:michaelliao/learngit.git
 下一步，就可以把本地库的所有内容推送到远程库上：
 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，
 还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
 $ git push -u origin master
 推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。
 从现在起，只要本地作了提交，就可以通过命令：
 $ git push origin master
 把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

15.从远程库克隆：用命令git clone克隆出一个本地库：
$ git clone git@github.com:michaelliao/gitskills.git
 你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。
 实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
 使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
 但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
 Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

16.使用GitHub
 如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，
 你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，
 然后，从自己的账号下clone：
 $ git clone git@github.com:michaelliao/bootstrap.git
 一定要从自己的账号下clone仓库，这样你才能推送修改。
 如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。
 如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。
 当然，对方是否接受你的pull request就不一定了。
 小结
 在GitHub上，可以任意Fork开源仓库；
 自己拥有Fork后的仓库的读写权限；
 可以推送pull request给官方仓库来贡献代码。

17.自定义Git
 在安装Git一节中，我们已经配置了user.name和user.email，实际上，Git还有很多可配置项。
 比如，让Git显示颜色，会让命令输出看起来更醒目：
 $ git config --global color.ui true
 

 

